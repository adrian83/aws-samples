AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'


Resources:

  UsersDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'users'
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'


  UserLambdaRole:
    DependsOn: UsersDynamoDBTable
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
            - 'sts:AssumeRole'
            Principal:
              Service:
              - 'lambda.amazonaws.com'
      Policies:
        - PolicyName: 'users-dynamodb-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                    - !GetAtt UsersDynamoDBTable.Arn 
        - PolicyName: 'users-logs-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - "arn:aws:logs:*:*:*"


  CreateUserLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'user-create'
      Role: !GetAtt UserLambdaRole.Arn 
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 25
      MemorySize: 128
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersDynamoDBTable
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import uuid

          def lambda_handler(event, context):
            print("event: {0}".format(event))

            users_table = os.environ['USERS_TABLE_NAME']
            body = json.loads(event['body'])

            if 'firstName' not in body or 'lastName' not in body:
              print("cannot persist user, invalid data: {0}".format(body))
              return {"statusCode": 400, "body": "Invalid input"}

            user_id = str(uuid.uuid4())
            first_name = body['firstName']
            last_name = body['lastName']

            dynamodb_client = boto3.client('dynamodb')
            response = dynamodb_client.put_item(
              TableName=users_table, 
              Item={'id': {'S': user_id}, 'firstName': {'S': first_name}, 'lastName': {'S': last_name}})

            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
              print("cannot put item: {0}".format(response))
              return {"statusCode": 500, "body": "Internal server error: {0}".format(response)}

            return {"statusCode": 201, "body": json.dumps({'id': user_id, 'firstName': first_name, 'lastName': last_name})}


  ListUsersLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'user-list'
      Role: !GetAtt UserLambdaRole.Arn 
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 25
      MemorySize: 128
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersDynamoDBTable
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os

          def lambda_handler(event, context):
            print("event: {0}".format(event))

            table_name = os.environ['USERS_TABLE_NAME']
            dynamodb = boto3.resource('dynamodb')
            users_table = dynamodb.Table(table_name)

            get_params = event['queryStringParameters']

            last_key = get_params['lastKey'] if get_params and 'lastKey' in get_params else None
            response = users_table.scan(Limit=10, ExclusiveStartKey={'id': last_key}) if last_key else users_table.scan(Limit=10)

            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
              print("cannot execute scaning: {0}".format(response))
              return {"statusCode": 500, "body": "Internal server error: {0}".format(response)}

            return {"statusCode": 200, "body": json.dumps({'users': response['Items']})}

  UpdateUserLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'user-update'
      Role: !GetAtt UserLambdaRole.Arn 
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 25
      MemorySize: 128
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersDynamoDBTable
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os

          def lambda_handler(event, context):
            print("event: {0}".format(event))

            users_table = os.environ['USERS_TABLE_NAME']
            user_id = event['pathParameters']['userId']
            body = json.loads(event['body'])

            if 'firstName' not in body or 'lastName' not in body:
              print("cannot update user, invalid data: {0}".format(body))
              return {"statusCode": 400, "body": "Invalid input"}

            first_name = body['firstName']
            last_name = body['lastName']

            dynamodb_client = boto3.client('dynamodb')
            response = dynamodb_client.update_item(
              TableName=users_table,
              Key={'id': {'S': user_id}},
              UpdateExpression="set firstName = :fn, lastName = :ln",
              ExpressionAttributeValues={
                ':fn': {'S': first_name},
                ':ln': {'S': last_name}
              },
              ReturnValues="UPDATED_NEW"
            )

            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
              print("cannot update item: {0}".format(response))
              return {"statusCode": 500, "body": "Internal server error: {0}".format(response)}

            return {"statusCode": 200, "body": json.dumps({'id': user_id, 'firstName': first_name, 'lastName':last_name})}


  DeleteUserLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'user-delete'
      Role: !GetAtt UserLambdaRole.Arn 
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 25
      MemorySize: 128
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersDynamoDBTable
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import os

          def lambda_handler(event, context):
            print("event: {0}".format(event))

            users_table = os.environ['USERS_TABLE_NAME']
            user_id = event['pathParameters']['userId']

            dynamodb_client = boto3.client('dynamodb')
            response = dynamodb_client.delete_item(
              TableName=users_table, 
              Key={'id': {'S': user_id}})

            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
              print("cannot delete item: {0}".format(response))
              return {"statusCode": 500, "body": "Internal server error: {0}".format(response)}

            return {"statusCode": 200}

  GetUserLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'user-get'
      Role: !GetAtt UserLambdaRole.Arn 
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 25
      MemorySize: 128
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersDynamoDBTable
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import os
          import json

          def lambda_handler(event, context):
            print("event: {0}".format(event))

            users_table = os.environ['USERS_TABLE_NAME']
            user_id = event['pathParameters']['userId']

            dynamodb_client = boto3.client('dynamodb')
            response = dynamodb_client.get_item(
              TableName=users_table,
              Key={ 'id': { 'S': user_id } }
            )

            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
              print("cannot get item: {0}".format(response))
              return {"statusCode": 500, "body": "Internal server error: {0}".format(response)}
            
            if 'Item' not in response:
              print("cannot get item with id: {0}".format(user_id))
              return {"statusCode": 404}
            
            item = response['Item']
            id = item['id']['S']
            first_name = item['firstName']['S']
            last_name = item['lastName']['S']

            return {"statusCode": 200, "body": json.dumps({'id': id, 'firstName': first_name, 'lastName': last_name})}



  UserAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'users-api-gateway'
      StageName: 'api-demo'
      MethodSettings:
        - HttpMethod: '*'
          MetricsEnabled: true
          ResourcePath: '/*'
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2018-06-04T13:58:30Z"
          title:
            Ref: AWS::StackName
        paths:
          /v1/users:
            post:
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "aws_proxy"
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserLambda.Arn}/invocations'
            get:
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "aws_proxy"
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListUsersLambda.Arn}/invocations'
          /v1/users/{userId}:
            delete:
              parameters:
              - name: userId
                in: path
                required: true
                type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "aws_proxy"
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUserLambda.Arn}/invocations'
            put:
              parameters:
              - name: userId
                in: path
                required: true
                type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "aws_proxy"
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUserLambda.Arn}/invocations'
            get:
              parameters:
              - name: userId
                in: path
                required: true
                type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "aws_proxy"
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserLambda.Arn}/invocations'


  CreateUserLambdaApiGatewayPermission:
    DependsOn: [CreateUserLambda, UserAPIGateway]
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt CreateUserLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPIGateway}/*'

  DeleteUserLambdaApiGatewayPermission:
    DependsOn: [DeleteUserLambda, UserAPIGateway]
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt DeleteUserLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPIGateway}/*'

  ListUsersLambdaApiGatewayPermission:
    DependsOn: [ListUsersLambda, UserAPIGateway]
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt ListUsersLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPIGateway}/*'

  UpdateUserLambdaApiGatewayPermission:
    DependsOn: [UpdateUserLambda, UserAPIGateway]
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt UpdateUserLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPIGateway}/*'

  GetUserLambdaApiGatewayPermission:
    DependsOn: [GetUserLambda, UserAPIGateway]
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt GetUserLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPIGateway}/*'
