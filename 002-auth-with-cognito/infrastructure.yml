AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'


Resources:

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      AccessTokenValidity: 60
      AutoVerifiedAttributes: 
        - email
      UserPoolName: cognito-demo-users


  UserPoolClient:
    DependsOn: UserPool
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: cognito-demo-client
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      EnableTokenRevocation: true
      GenerateSecret: False
      UserPoolId: !Ref UserPool


  UserAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: cognito-demo-gateway
      StageName: cognito-demo
      Auth:
        ApiKeyRequired: false
        Authorizers:
          MyCognitoAuthorizer:
            AuthType: "COGNITO_USER_POOLS"
            UserPoolArn: !GetAtt UserPool.Arn
        DefaultAuthorizer: MyCognitoAuthorizer


  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: cognito-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:*'
            Resource: !GetAtt UserPool.Arn
          - Effect: Allow
            Action:
              - 'logs:*'
            Resource: 'arn:aws:logs:*:*:*'


  RegisterUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: auth-register
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 25
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Role: !GetAtt LambdaRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Method: post
            Path: /v1/auth/register
            RestApiId: 
              Ref: UserAPIGateway
            Auth:
              Authorizer: NONE
      InlineCode: |
          import boto3
          import json
          import os

          user_pool_id = os.environ['USER_POOL_ID']
          client = boto3.client('cognito-idp')

          def lambda_handler(event, context):

            body = json.loads(event['body'])

            if 'email' not in body:
              print("cannot register user, invalid data: {0}".format(body))
              return {"statusCode": 400, "body": "Invalid input"}

            email = body['email']

            response = client.admin_create_user(
                UserPoolId=user_pool_id,
                Username=email,
                UserAttributes=[
                    {
                        'Name': 'email',
                        'Value': email
                    }
                ],
                TemporaryPassword='abcdefGHIJK1234!',
                ForceAliasCreation=True,
                DesiredDeliveryMediums=['EMAIL']
            )

            return {"statusCode": 201}


  ChangePasswordLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: auth-setpassword
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 25
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt LambdaRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Method: post
            Path: /v1/auth/setpassword
            RestApiId: 
              Ref: UserAPIGateway
            Auth:
              Authorizer: NONE
      InlineCode: |
          import boto3
          import json
          import os

          user_pool_id = os.environ['USER_POOL_ID']
          user_pool_client_id = os.environ['USER_POOL_CLIENT_ID']

          client = boto3.client('cognito-idp')

          def lambda_handler(event, context):

            body = json.loads(event['body'])

            if 'email' not in body or 'oldPassword' not in body or 'newPassword' not in body:
              print("cannot set password, invalid data: {0}".format(body))
              return {"statusCode": 400, "body": "Invalid input"}

            username = body['email']
            old_password = body['oldPassword']
            new_password = body['newPassword']

            auth_params = {'USERNAME': username, 'PASSWORD': old_password}

            auth_resp = client.admin_initiate_auth(
                                                UserPoolId=user_pool_id,
                                                ClientId=user_pool_client_id,
                                                AuthFlow='ADMIN_NO_SRP_AUTH',
                                                AuthParameters=auth_params)

            challenge_name = auth_resp.get('ChallengeName')
            session = auth_resp.get('Session')

            challenge_responses = {'USERNAME': username, 'NEW_PASSWORD': new_password}

            chellange_response = client.admin_respond_to_auth_challenge(
                                                              UserPoolId=user_pool_id,
                                                              ClientId=user_pool_client_id,
                                                              ChallengeName=challenge_name,
                                                              ChallengeResponses=challenge_responses,
                                                              Session=session)

            return {"statusCode": 200}


  SignInLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: auth-signin
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 25
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt LambdaRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Method: post
            Path: /v1/auth/signin
            RestApiId: 
              Ref: UserAPIGateway
            Auth:
              Authorizer: NONE
      InlineCode: |
          import boto3
          import json
          import os

          user_pool_id = os.environ['USER_POOL_ID']
          user_pool_client_id = os.environ['USER_POOL_CLIENT_ID']

          client = boto3.client('cognito-idp')

          def lambda_handler(event, context):

            body = json.loads(event['body'])

            if 'email' not in body or 'password' not in body:
              print("cannot sing in user, invalid data: {0}".format(body))
              return {"statusCode": 400, "body": "Invalid input"}

            response = client.admin_initiate_auth(
                                            UserPoolId=user_pool_id,
                                            ClientId=user_pool_client_id,
                                            AuthFlow='ADMIN_NO_SRP_AUTH',
                                            AuthParameters={
                                              'USERNAME': body['email'],
                                              'PASSWORD': body['password']
                                            }
                                        )

            tokens = {
              "accessToken": response['AuthenticationResult']['AccessToken'],
              "idToken": response['AuthenticationResult']['IdToken'],
              "refreshToken": response['AuthenticationResult']['RefreshToken']
            }

            return {"statusCode": 200, "body": json.dumps(tokens)}


  SignOutLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: auth-signout
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 25
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt LambdaRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Method: post
            Path: /v1/auth/signout
            RestApiId: 
              Ref: UserAPIGateway
            Auth:
              Authorizer: NONE
      InlineCode: |
          import boto3
          import json
          import os

          user_pool_client_id = os.environ['USER_POOL_CLIENT_ID']

          client = boto3.client('cognito-idp')

          def lambda_handler(event, context):

            body = json.loads(event['body'])

            if 'token' not in body:
              print("cannot sing out user, invalid data: {0}".format(body))
              return {"statusCode": 400, "body": "Invalid input"}

            response = client.revoke_token(
                                        Token=body['token'],
                                        ClientId=user_pool_client_id
                                        )

            return {"statusCode": 200}


  SecuredLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: secured
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 25
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Method: get
            Path: /v1/secured
            RestApiId: 
              Ref: UserAPIGateway
      InlineCode: |
          import json

          def lambda_handler(event, context):

            email = event['requestContext']['authorizer']['claims']['email']

            resp = {
              "message": f"Hello {email}"
            }

            return {"statusCode": 200, "body": json.dumps(resp)}

