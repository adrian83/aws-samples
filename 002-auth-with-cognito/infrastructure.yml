AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'




Resources:

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      # AdminCreateUserConfig: 
      #   AdminCreateUserConfig
      AliasAttributes: 
        - email
      AutoVerifiedAttributes: 
        - email
      # DeviceConfiguration: 
      #   DeviceConfiguration
      # EmailConfiguration: 
      #   EmailConfiguration
      # EmailVerificationMessage: String
      # EmailVerificationSubject: String
      # EnabledMfas: 
      #   - String
      # LambdaConfig: 
      #   LambdaConfig
      # MfaConfiguration: String
      # Policies: 
      #   Policies
      # Schema: 
      #   - SchemaAttribute
      # SmsAuthenticationMessage: String
      # SmsConfiguration: 
      #   SmsConfiguration
      # SmsVerificationMessage: String
      # UsernameAttributes: 
      #   - email
      # UsernameConfiguration: 
      #   UsernameConfiguration
      # UserPoolAddOns: 
      #   UserPoolAddOns
      UserPoolName: users
      # UserPoolTags: Json
      # VerificationMessageTemplate: 
      #   VerificationMessageTemplate 

  UserPoolClient:
    DependsOn: UserPool
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      # AccessTokenValidity: Integer
      # AllowedOAuthFlows: 
      #   - String
      # AllowedOAuthFlowsUserPoolClient: Boolean
      # AllowedOAuthScopes: 
      #   - String
      # AnalyticsConfiguration: 
      #   AnalyticsConfiguration
      # CallbackURLs: 
      #   - String
      ClientName: MyClient
      # DefaultRedirectURI: String
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      GenerateSecret: False
      # IdTokenValidity: Integer
      # LogoutURLs: 
      #   - String
      # PreventUserExistenceErrors: String
      # ReadAttributes: 
      #   - String
      # RefreshTokenValidity: Integer
      # SupportedIdentityProviders: 
      #   - String
      # TokenValidityUnits: 
      #   TokenValidityUnits
      UserPoolId: !Ref UserPool
      # WriteAttributes: 
      #   - String



  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: cognito-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:*'
            Resource: !GetAtt UserPool.Arn




  RegisterUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'auth-register'
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 25
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Role: !GetAtt LambdaRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Method: post
            Path: /v1/auth/register
            RestApiId: 
              Ref: UserAPIGateway
      InlineCode: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import uuid

          user_pool_id = os.environ['USER_POOL_ID']
          client = boto3.client('cognito-idp')


          def lambda_handler(event, context):
            print("event: {0}".format(event))

            body = json.loads(event['body'])

            if 'email' not in body:
              print("cannot register user, invalid data: {0}".format(body))
              return {"statusCode": 400, "body": "Invalid input"}

            response = client.admin_create_user(
                UserPoolId=user_pool_id,
                Username=str(uuid.uuid4()),
                UserAttributes=[
                    {
                        'Name': 'email',
                        'Value': body['email']
                    }
                ],
                TemporaryPassword='abcdefGHIJK1234!',
                ForceAliasCreation=True,
                DesiredDeliveryMediums=['EMAIL']
            )

            return {"statusCode": 201}

  ChangePasswordLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'auth-changepassword'
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 20
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt LambdaRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Method: put
            Path: /v1/auth/changepassword
            RestApiId: 
              Ref: UserAPIGateway
      InlineCode: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import uuid

          user_pool_id = os.environ['USER_POOL_ID']
          user_pool_client_id = os.environ['USER_POOL_CLIENT_ID']

          client = boto3.client('cognito-idp')


          def lambda_handler(event, context):
            print("event: {0}".format(event))

            body = json.loads(event['body'])

            if 'email' not in body or 'oldPassword' not in body or 'newPassword' not in body:
              print("cannot change password, invalid data: {0}".format(body))
              return {"statusCode": 400, "body": "Invalid input"}

            username = body['email']
            old_password = body['oldPassword']
            new_password = body['newPassword']

            auth_params = {'USERNAME': username, 'PASSWORD': old_password}

            auth_resp = client.admin_initiate_auth(
                                                UserPoolId=user_pool_id,
                                                ClientId=user_pool_client_id,
                                                AuthFlow='ADMIN_NO_SRP_AUTH',
                                                AuthParameters=auth_params)

            print(str(auth_resp))

            challenge_name = auth_resp.get('ChallengeName')
            session = auth_resp.get('Session')

            challenge_responses = {'USERNAME': username, 'NEW_PASSWORD': new_password}

            chellange_response = client.admin_respond_to_auth_challenge(
                                                              UserPoolId=user_pool_id,
                                                              ClientId=user_pool_client_id,
                                                              ChallengeName=challenge_name,
                                                              ChallengeResponses=challenge_responses,
                                                              Session=session)

            print(str(chellange_response))

            return {"statusCode": 200}


  UserAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: 'cognito-demo-gateway'
      StageName: 'cognito-demo'



